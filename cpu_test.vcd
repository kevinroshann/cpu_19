$date
	Tue Sep 16 18:06:42 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var wire 4 ! rs2_out [3:0] $end
$var wire 4 " rs1_out [3:0] $end
$var wire 19 # result_out [18:0] $end
$var wire 4 $ rd_out [3:0] $end
$var wire 19 % pc_out [18:0] $end
$var wire 4 & opcode_out [3:0] $end
$var wire 19 ' mem_data_out [18:0] $end
$var wire 11 ( jump_addr_out [10:0] $end
$var wire 19 ) instruction_out [18:0] $end
$var wire 19 * fft_result_out [18:0] $end
$var wire 1 + fft_en_out $end
$var wire 19 , encr_result_out [18:0] $end
$var wire 1 - encr_en_out $end
$var wire 1 . decr_en_out $end
$var wire 8 / branch_addr_out [7:0] $end
$var wire 3 0 alu_type_out [2:0] $end
$var wire 3 1 alu_op_out [2:0] $end
$var reg 1 2 clk $end
$var reg 1 3 reset $end
$scope module cpu_dut $end
$var wire 19 4 alu_b_out [18:0] $end
$var wire 3 5 alu_op_out [2:0] $end
$var wire 3 6 alu_type_out [2:0] $end
$var wire 1 7 alu_use_out $end
$var wire 8 8 branch_addr_out [7:0] $end
$var wire 1 9 branch_en_out $end
$var wire 11 : call_addr_out [10:0] $end
$var wire 1 ; call_en_out $end
$var wire 1 2 clk $end
$var wire 19 < encr_result_out [18:0] $end
$var wire 19 = fft_result_out [18:0] $end
$var wire 2 > funct2_out [1:0] $end
$var wire 19 ? instruction_out [18:0] $end
$var wire 11 @ jump_addr_out [10:0] $end
$var wire 1 A jump_en_out $end
$var wire 8 B mem_addr_out [7:0] $end
$var wire 19 C mem_data_out [18:0] $end
$var wire 1 D mem_read_out $end
$var wire 1 E mem_write_out $end
$var wire 4 F opcode_out [3:0] $end
$var wire 19 G pc_next_out [18:0] $end
$var wire 19 H pc_out [18:0] $end
$var wire 1 I pc_src_out $end
$var wire 4 J rd_out [3:0] $end
$var wire 19 K readdata1_out [18:0] $end
$var wire 19 L readdata2_out [18:0] $end
$var wire 1 M regwrite_out $end
$var wire 1 3 reset $end
$var wire 19 N result_out [18:0] $end
$var wire 1 O ret_en_out $end
$var wire 4 P rs1_out [3:0] $end
$var wire 4 Q rs2_out [3:0] $end
$var wire 2 R type_out [1:0] $end
$var wire 19 S write_data_out [18:0] $end
$var wire 1 T zero_out $end
$var wire 1 U zero $end
$var wire 19 V write_data [18:0] $end
$var wire 2 W types [1:0] $end
$var wire 1 X subroutine_pc_src $end
$var wire 19 Y subroutine_pc_next [18:0] $end
$var wire 19 Z stack_top_out [18:0] $end
$var wire 1 [ stack_full_out $end
$var wire 1 \ stack_empty_out $end
$var wire 4 ] sp_out [3:0] $end
$var wire 4 ^ rs2 [3:0] $end
$var wire 4 _ rs1 [3:0] $end
$var wire 1 ` ret_en $end
$var wire 19 a result [18:0] $end
$var wire 1 b regwrite $end
$var wire 19 c readdata2 [18:0] $end
$var wire 19 d readdata1 [18:0] $end
$var wire 4 e rd [3:0] $end
$var wire 1 f pc_src $end
$var wire 19 g pc_out_internal [18:0] $end
$var wire 19 h pc_next [18:0] $end
$var wire 19 i pc_in [18:0] $end
$var wire 4 j opcode [3:0] $end
$var wire 1 k mem_write $end
$var wire 1 l mem_read $end
$var wire 19 m mem_data [18:0] $end
$var wire 8 n mem_addr [7:0] $end
$var wire 1 o jump_en $end
$var wire 11 p jump_addr [10:0] $end
$var wire 19 q instruction [18:0] $end
$var wire 2 r funct2 [1:0] $end
$var wire 19 s fft_result [18:0] $end
$var wire 1 + fft_en_out $end
$var wire 19 t encr_result [18:0] $end
$var wire 1 - encr_en_out $end
$var wire 1 . decr_en_out $end
$var wire 1 u call_en $end
$var wire 11 v call_addr [10:0] $end
$var wire 1 w branch_en $end
$var wire 8 x branch_addr [7:0] $end
$var wire 1 y alu_use $end
$var wire 3 z alu_type [2:0] $end
$var wire 3 { alu_op [2:0] $end
$var wire 19 | alu_b [18:0] $end
$var reg 1 } program_end $end
$scope module alu1 $end
$var wire 19 ~ b [18:0] $end
$var wire 3 !" alu_op [2:0] $end
$var wire 19 "" a [18:0] $end
$var parameter 3 #" ADD $end
$var parameter 3 $" AND $end
$var parameter 3 %" DIV $end
$var parameter 3 &" MUL $end
$var parameter 3 '" NOT $end
$var parameter 3 (" OR $end
$var parameter 3 )" SUB $end
$var parameter 3 *" XOR $end
$var reg 19 +" result [18:0] $end
$var reg 1 U zero $end
$upscope $end
$scope module alu_control1 $end
$var wire 2 ," types [1:0] $end
$var wire 2 -" funct2 [1:0] $end
$var wire 3 ." alu_type [2:0] $end
$var parameter 3 /" ADD $end
$var parameter 3 0" AND $end
$var parameter 3 1" DIV $end
$var parameter 3 2" MUL $end
$var parameter 3 3" NOT $end
$var parameter 3 4" OR $end
$var parameter 3 5" SUB $end
$var parameter 3 6" XOR $end
$var reg 3 7" alu_op [2:0] $end
$upscope $end
$scope module branch1 $end
$var wire 1 } program_end $end
$var wire 2 8" types [1:0] $end
$var wire 1 X subroutine_pc_src $end
$var wire 19 9" subroutine_pc_next [18:0] $end
$var wire 19 :" readdata2 [18:0] $end
$var wire 19 ;" readdata1 [18:0] $end
$var wire 19 <" pc_current [18:0] $end
$var wire 4 =" opcode [3:0] $end
$var wire 11 >" jump_addr [10:0] $end
$var wire 8 ?" branch_addr [7:0] $end
$var reg 19 @" pc_next [18:0] $end
$var reg 1 f pc_src $end
$upscope $end
$scope module control1 $end
$var wire 1 } program_end $end
$var wire 4 A" opcode [3:0] $end
$var reg 1 y alu_use $end
$var reg 1 w branch_en $end
$var reg 1 u call_en $end
$var reg 1 . decr_en $end
$var reg 1 - encr_en $end
$var reg 1 + fft_en $end
$var reg 1 o jump_en $end
$var reg 1 l mem_read $end
$var reg 1 k mem_write $end
$var reg 1 b regwrite $end
$var reg 1 ` ret_en $end
$upscope $end
$scope module data_mem1 $end
$var wire 4 B" addr [3:0] $end
$var wire 1 2 clk $end
$var wire 1 l mem_read $end
$var wire 1 C" mem_write $end
$var wire 1 3 reset $end
$var wire 19 D" write_data [18:0] $end
$var reg 19 E" read_data [18:0] $end
$var integer 32 F" i [31:0] $end
$upscope $end
$scope module encrdecr1 $end
$var wire 19 G" a [18:0] $end
$var wire 1 . decr_en $end
$var wire 1 - encr_en $end
$var parameter 19 H" key $end
$var reg 19 I" result [18:0] $end
$upscope $end
$scope module fft1 $end
$var wire 19 J" a [18:0] $end
$var wire 1 + fft_en $end
$var reg 19 K" fft_result [18:0] $end
$var reg 3 L" freq_bin [2:0] $end
$var reg 19 M" real_part [18:0] $end
$var reg 19 N" temp_calc [18:0] $end
$upscope $end
$scope module instr_mem1 $end
$var wire 5 O" instr_addr [4:0] $end
$var reg 19 P" instruction [18:0] $end
$var integer 32 Q" i [31:0] $end
$upscope $end
$scope module instr_parser1 $end
$var wire 19 R" instr [18:0] $end
$var reg 3 S" alu_type [2:0] $end
$var reg 8 T" branch_addr [7:0] $end
$var reg 11 U" call_addr [10:0] $end
$var reg 2 V" funct2 [1:0] $end
$var reg 11 W" jump_addr [10:0] $end
$var reg 8 X" mem_addr [7:0] $end
$var reg 4 Y" opcode [3:0] $end
$var reg 4 Z" rd [3:0] $end
$var reg 4 [" rs1 [3:0] $end
$var reg 4 \" rs2 [3:0] $end
$upscope $end
$scope module p1 $end
$var wire 1 2 clk $end
$var wire 19 ]" pc_in [18:0] $end
$var wire 1 3 reset $end
$var reg 19 ^" pc_out [18:0] $end
$upscope $end
$scope module register_file1 $end
$var wire 1 2 clk $end
$var wire 4 _" rd [3:0] $end
$var wire 1 `" regwrite $end
$var wire 1 3 reset $end
$var wire 4 a" rs1 [3:0] $end
$var wire 4 b" rs2 [3:0] $end
$var wire 19 c" write_data [18:0] $end
$var wire 19 d" readdata2 [18:0] $end
$var wire 19 e" readdata1 [18:0] $end
$var integer 32 f" i [31:0] $end
$upscope $end
$scope module subroutine1 $end
$var wire 11 g" call_addr [10:0] $end
$var wire 1 u call_en $end
$var wire 1 2 clk $end
$var wire 4 h" opcode [3:0] $end
$var wire 19 i" pc_current [18:0] $end
$var wire 1 } program_end $end
$var wire 1 3 reset $end
$var wire 1 ` ret_en $end
$var wire 19 j" stack_top [18:0] $end
$var wire 1 [ stack_full $end
$var wire 1 \ stack_empty $end
$var wire 4 k" sp_out [3:0] $end
$var wire 19 l" pop_data [18:0] $end
$var reg 19 m" pc_next [18:0] $end
$var reg 1 X pc_src $end
$var reg 1 n" pop $end
$var reg 1 o" push $end
$var reg 19 p" push_data [18:0] $end
$scope module stack_inst $end
$var wire 1 2 clk $end
$var wire 1 n" pop $end
$var wire 1 o" push $end
$var wire 19 q" push_data [18:0] $end
$var wire 1 3 reset $end
$var wire 1 [ stack_full $end
$var wire 1 \ stack_empty $end
$var reg 19 r" pop_data [18:0] $end
$var reg 4 s" sp [3:0] $end
$var integer 32 t" i [31:0] $end
$upscope $end
$upscope $end
$scope module type_decoder1 $end
$var wire 4 u" opcode [3:0] $end
$var reg 2 v" types [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11010001010110011 H"
b110 6"
b1 5"
b101 4"
b111 3"
b10 2"
b11 1"
b100 0"
b0 /"
b110 *"
b1 )"
b101 ("
b111 '"
b10 &"
b11 %"
b100 $"
b0 #"
$end
#0
$dumpvars
b0 v"
b0 u"
b10000 t"
b1111 s"
b0 r"
b0 q"
b0 p"
0o"
0n"
b1 m"
b0 l"
b1111 k"
b0 j"
b0 i"
b0 h"
b0 g"
b10000 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
0`"
b0 _"
b0 ^"
b1 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b100000 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b1 K"
b0 J"
b0 I"
b0 G"
b10000 F"
b0 E"
b0 D"
0C"
b0 B"
b0 A"
b1 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b1 9"
b0 8"
b0 7"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 ""
b0 !"
b0 ~
0}
b0 |
b0 {
b0 z
0y
b0 x
0w
b0 v
0u
b0 t
b1 s
b0 r
b0 q
b0 p
0o
b0 n
b0 m
0l
0k
b0 j
b1 i
b1 h
b0 g
0f
b0 e
b0 d
b0 c
0b
b0 a
0`
b0 _
b0 ^
b1111 ]
1\
0[
b0 Z
b1 Y
0X
b0 W
b0 V
1U
1T
b0 S
b0 R
b0 Q
b0 P
0O
b0 N
0M
b0 L
b0 K
b0 J
0I
b0 H
b1 G
b0 F
0E
0D
b0 C
b0 B
0A
b0 @
b0 ?
b0 >
b1 =
b0 <
0;
b0 :
09
b0 8
07
b0 6
b0 5
b0 4
13
02
b0 1
b0 0
b0 /
0.
0-
b0 ,
0+
b1 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#5000
b10000 t"
b10000 F"
b10000 f"
12
#10000
02
03
#15000
b10 i
b10 ]"
b1 O"
b10 G
b10 h
b10 @"
b10 Y
b10 9"
b10 m"
b1 %
b1 H
b1 g
b1 <"
b1 ^"
b1 i"
12
#20000
02
#25000
b100 S
b100 V
b100 c"
b100 D"
b11 N"
b101 L"
b101 M"
b100 *
b100 =
b100 s
b100 K"
1C"
b101 '
b101 C
b101 m
b101 E"
b101 G"
b101 J"
1+
1E
1k
1D
1l
b1 "
b1 P
b1 _
b1 ["
b1 a"
b1011 &
b1011 F
b1011 j
b1011 ="
b1011 A"
b1011 Y"
b1011 h"
b1011 u"
b11 i
b11 ]"
b1011000100000000000 )
b1011000100000000000 ?
b1011000100000000000 q
b1011000100000000000 P"
b1011000100000000000 R"
b10 O"
b11 G
b11 h
b11 @"
b11 Y
b11 9"
b11 m"
b10 %
b10 H
b10 g
b10 <"
b10 ^"
b10 i"
12
#30000
02
#35000
b101 ,
b101 <
b101 t
b101 I"
b101 S
b101 V
b101 c"
b1 B"
1.
0+
1E
1k
1D
1l
b101 D"
b1 B
b1 n
b1 X"
b1 "
b1 P
b1 _
b1 ["
b1 a"
b1010 &
b1010 F
b1010 j
b1010 ="
b1010 A"
b1010 Y"
b1010 h"
b1010 u"
b100 i
b100 ]"
b1010000100000000001 )
b1010000100000000001 ?
b1010000100000000001 q
b1010000100000000001 P"
b1010000100000000001 R"
b0 L"
b0 N"
b0 M"
b1 *
b1 =
b1 s
b1 K"
b11 O"
b100 G
b100 h
b100 @"
b100 Y
b100 9"
b100 m"
b11010001010110110 '
b11010001010110110 C
b11010001010110110 m
b11010001010110110 E"
b11010001010110110 G"
b11010001010110110 J"
b11 %
b11 H
b11 g
b11 <"
b11 ^"
b11 i"
12
#37000
